async function generateSitemap() {
  console.log(`🌐 URL base: ${baseUrl}`);

  // Verifica variabili
  if (!supabaseUrl || !supabaseKey) {
    throw new Error('Mancano le variabili Supabase URL o KEY');
  }

  // Crea client Supabase
  const supabase = createClient(supabaseUrl, supabaseKey);

  // Recupera conteggio totale
  const { count: totalCount, error: countError } = await supabase
    .from('generated_pages')
    .select('*', { count: 'exact', head: true });

  if (countError) {
    throw new Error(`Errore conteggio: ${countError.message}`);
  }

  console.log(`🔢 Totale record nel DB: ${totalCount || 0}`);

  // Recupera tutti i record
  const { data: filmPages, error: filmError } = await supabase
    .from('generated_pages')
    .select('slug')
    .eq('page_type', 'film');

  const { data: seriePages, error: serieError } = await supabase
    .from('generated_pages')
    .select('slug')
    .eq('page_type', 'serie');

  if (filmError || serieError) {
    throw new Error(`Errore query: ${filmError?.message || serieError?.message}`);
  }

  console.log(`✅ Sitemap generata con successo in ${SITEMAP_PATH}`);

  // Aggiorna statistiche se possibile
  try {
    const { error: statsError } = await supabase
      .from('sitemap_stats')
      .upsert([{
        urlCount: totalUrls,
        filmCount: filmPages.length,
        serieCount: seriePages.length
      }]);

    if (statsError) {
      throw new Error(`Errore aggiornamento statistiche: ${statsError.message}`);
    }
  } catch (error) {
    console.error(`❌ ERRORE: ${error.message}`);
    return { success: false, error: error.message };
  }

  return { success: true };
}

// Esegui la generazione
generateSitemap().then(result => {
  console.log(JSON.stringify(result, null, 2));
  if (!result.success) process.exit(1);
});
