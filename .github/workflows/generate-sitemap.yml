name: Genera Sitemap

on:
  # Esegui ogni giorno alle 2:00 UTC (4:00 in Italia)
  schedule:
    - cron: '0 2 * * *'
  
  # Consente di eseguirlo manualmente dalla UI di GitHub
  workflow_dispatch:

jobs:
  generate:
    name: Genera e pubblica sitemap
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Installa dipendenze
        run: npm ci
      
      - name: Genera sitemap
        env:
          SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}
          SITEMAP_PATH: './public/sitemap.xml'
        run: |
          echo "Inizia generazione sitemap..."
          echo "Debug - Variabili ambiente disponibili:"
          env | grep -i 'SUPABASE\|SITE_URL' || echo "Nessuna variabile trovata"
          node -e "
          console.log('Debug - Variabili Node.js:');
          console.log('SUPABASE_URL exists:', !!process.env.SUPABASE_URL);
          console.log('SUPABASE_KEY exists:', !!process.env.SUPABASE_KEY);
          console.log('NEXT_PUBLIC_SITE_URL exists:', !!process.env.NEXT_PUBLIC_SITE_URL);
          
          const { createClient } = require('@supabase/supabase-js');
          const fs = require('fs');

          (async () => {
            try {
              // Ottieni e verifica le variabili d'ambiente
              const supabaseUrl = process.env.SUPABASE_URL;
              const supabaseKey = process.env.SUPABASE_KEY;
              const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 'https://mastroianni.app';
              const SITEMAP_PATH = process.env.SITEMAP_PATH || './public/sitemap.xml';

              console.log(\`üåê URL base: \${baseUrl}\`);
              console.log(\`üìÑ Percorso sitemap: \${SITEMAP_PATH}\`);
              
              // Log dei valori parziali oscurati per debug
              if (supabaseUrl) {
                console.log(\`üîë SUPABASE_URL trovato (inizia con: \${supabaseUrl.substring(0, 10)}...)\`);
              } else {
                console.error('‚ùå SUPABASE_URL non trovato!');
              }
              
              if (supabaseKey) {
                console.log(\`üîë SUPABASE_KEY trovato (lunghezza: \${supabaseKey.length})\`);
              } else {
                console.error('‚ùå SUPABASE_KEY non trovato!');
              }

              if (!supabaseUrl || !supabaseKey) {
                console.error('‚ùå Mancano le variabili Supabase URL o KEY');
                process.exit(1);
              }

              // Inizializza client con opzioni esplicite
              console.log('üîÑ Inizializzazione client Supabase...');
              const supabase = createClient(supabaseUrl, supabaseKey, {
                auth: {
                  persistSession: false,
                  autoRefreshToken: false
                }
              });
              console.log('‚úÖ Client Supabase inizializzato con successo');

              console.log('üîÑ Recupero conteggio totale...');
              // Recupera conteggio totale
              const { count: totalCount, error: countError } = await supabase
                .from('generated_pages')
                .select('*', { count: 'exact', head: true });

              if (countError) {
                throw new Error(\`Errore conteggio: \${countError.message}\`);
              }

              console.log(\`üî¢ Totale record nel DB: \${totalCount || 0}\`);

              // Recupera tutti i record
              console.log('üîÑ Recupero film...');
              const { data: filmPages, error: filmError } = await supabase
                .from('generated_pages')
                .select('slug')
                .eq('page_type', 'film');

              if (filmError) {
                throw new Error(\`Errore query film: \${filmError.message}\`);
              }
              
              console.log('üîÑ Recupero serie...');
              const { data: seriePages, error: serieError } = await supabase
                .from('generated_pages')
                .select('slug')
                .eq('page_type', 'serie');

              if (serieError) {
                throw new Error(\`Errore query serie: \${serieError.message}\`);
              }
              
              // Filtra slug vuoti
              const filmSlugs = (filmPages || [])
                .map(page => page.slug)
                .filter(slug => slug && slug.trim() !== '');
                
              const serieSlugs = (seriePages || [])
                .map(page => page.slug)
                .filter(slug => slug && slug.trim() !== '');
              
              console.log(\`üé¨ Film: \${filmSlugs.length}, üì∫ Serie: \${serieSlugs.length}\`);
              
              // Rotte statiche
              const staticRoutes = ['', '/search', '/login', '/about'];
              const totalUrls = staticRoutes.length + filmSlugs.length + serieSlugs.length;
              
              console.log(\`üìä Totale URL sitemap: \${totalUrls}\`);
              
              // Genera sitemap
              const xml = \`<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
          <\!-- Generata il: \${new Date().toISOString()} con \${totalUrls} URL -->
          <urlset xmlns=\\"http://www.sitemaps.org/schemas/sitemap/0.9\\" count=\\"\${totalUrls}\\">
            \${staticRoutes.map(route => \`
              <url>
                <loc>\${baseUrl}\${route}</loc>
                <changefreq>weekly</changefreq>
                <priority>\${route === '' ? '1.0' : '0.8'}</priority>
              </url>
            \`).join('')}
            
            \${filmSlugs.map(slug => \`
              <url>
                <loc>\${baseUrl}/film/\${slug}</loc>
                <changefreq>monthly</changefreq>
                <priority>0.7</priority>
              </url>
            \`).join('')}
            
            \${serieSlugs.map(slug => \`
              <url>
                <loc>\${baseUrl}/serie/\${slug}</loc>
                <changefreq>monthly</changefreq>
                <priority>0.7</priority>
              </url>
            \`).join('')}
          </urlset>\`;
              
              // Salva sitemap
              fs.writeFileSync(SITEMAP_PATH, xml);
              console.log(\`‚úÖ Sitemap generata con successo in \${SITEMAP_PATH}\`);
              
              // Aggiorna statistiche se possibile
              try {
                const { error: statsError } = await supabase
                  .from('sitemap_stats')
                  .upsert([{
                    id: 1,
                    last_generation: new Date().toISOString(),
                    urls_count: totalUrls,
                    film_count: filmSlugs.length,
                    serie_count: serieSlugs.length,
                    is_error: false,
                    error_message: null
                  }]);
                  
                if (statsError) {
                  console.log(\`‚ö†Ô∏è Errore aggiornamento statistiche: \${statsError.message}\`);
                } else {
                  console.log('üìä Statistiche aggiornate con successo');
                }
              } catch (statsError) {
                console.log(\`‚ö†Ô∏è Errore durante aggiornamento statistiche: \${statsError.message}\`);
              }
              
            } catch (error) {
              console.error(\`‚ùå ERRORE: \${error.message}\`);
              process.exit(1);
            }
          })();
          "
      
      - name: Commit e push sitemap
        run: |
          git config --global user.name 'GitHub Action Bot'
          git config --global user.email 'action@github.com'
          git add public/sitemap.xml
          git commit -m "Aggiorna sitemap.xml [skip ci]" || echo "Nessuna modifica da committare"
          git push
